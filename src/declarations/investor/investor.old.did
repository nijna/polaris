type UserId = principal;
type TraderId = principal;
type Result_1 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Profile = 
 record {
   bio: opt text;
   displayName: text;
   follows: vec TraderId;
   id: UserId;
   investedPositions: vec PositionId;
 };
type PositionId = nat;
type Error = 
 variant {
   AlreadyExists;
   CouldntFollowTrader;
   CouldntUnfollowTrader;
   InvestorAlreadyFollowed;
   NotAuthorized;
   NotEnoughFamePoints;
   NotFound;
 };
service : {
  createInvestorProfile: (text, opt text) -> (Result);
  debugUpsertBinanceApiKeyFromPlainText: (text, text) -> (Result);
  deleteInvestorProfile: () -> (Result);
  followTrader: (TraderId) -> (Result);
  readInvestorProfile: () -> (Result_1) query;
  retrieveApiKey: (text, text) -> (text) query;
  setPassword: (text) -> (Result);
  unfollowTrader: (TraderId) -> (Result);
  validatePassword: (text, UserId) -> (bool);
}
