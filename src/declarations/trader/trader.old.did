type UserId = principal;
type Result_1 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Profile = 
 record {
   assesedRisk: opt nat;
   bio: opt text;
   country: opt text;
   creationTime: int;
   displayName: text;
   failedPositions: nat;
   famePoints: FamePoints;
   followers: vec InvestorId;
   id: UserId;
   level: nat;
   openedPositions: nat;
   successfulPositions: nat;
 };
type InvestorId = principal;
type FamePoints = nat;
type Error = 
 variant {
   AlreadyExists;
   NotAuthorized;
   NotEnoughFamePoints;
   NotFound;
 };
service : {
  createTraderProfile: (text, opt text, opt text) -> (Result);
  deleteTraderProfile: () -> (Result);
  followTrader: (UserId, InvestorId) -> (bool);
  readAllTraderProfiles: () -> (vec record {
                                      UserId;
                                      Profile;
                                    });
  readTraderFamePoints: (UserId) -> (FamePoints);
  readTraderProfile: () -> (Result_1);
  traderPrincipalExists: (UserId) -> (bool);
  unfollowTrader: (UserId, InvestorId) -> (bool);
  updateTraderBio: (text) -> (Result);
}
